#!/usr/bin/env python3
def _viv_use(*pkgs, track_exe=False, name=""):
    T,F,N=True,False,None;i,s,m,spec=__import__,str,map,[*pkgs]
    e,w=lambda x: T if x else F,lambda p,t: p.write_text(t)
    if not {*m(type,pkgs)}=={s}: raise ValueError(f"spec: {pkgs} is invalid")
    ge,sys,P,ew=i("os").getenv,i("sys"),i("pathlib").Path,i("sys").stderr.write
    (cache:=(P(ge("XDG_CACHE_HOME",P.home()/".cache"))/"viv"/"venvs")).mkdir(parents=T,exist_ok=T)
    ((sha256:=i("hashlib").sha256()).update((s(spec)+
    (((exe:=("N/A",s(P(i("sys").executable).resolve()))[e(track_exe)])))).encode()))
    if {env:=cache/(((_id:=sha256.hexdigest()),name)[e(name)])}-{*cache.glob("*/")} or ge("VIV_FORCE"):
        v=e(ge("VIV_VERBOSE"));ew(f"generating new vivenv -> {env.name}
")
        i("venv").EnvBuilder(with_pip=T,clear=T).create(env)
        w(env/"pip.conf","[global]
disable-pip-version-check=true")
        if (rc:=(p:=i("subprocess").run([env/"bin"/"pip","install","--force-reinstall",*spec],text=T,
            stdout=(-1,N)[v],stderr=(-2,N)[v])).returncode)!=0:
            if env.is_dir():i("shutil").rmtree(env)
            ew(f"pip had non zero exit ({rc})
{p.stdout}
");sys.exit(rc)
        w(env/"viv-info.json",i("json").dumps(
            {"created":s(i("datetime").datetime.today()),"id":_id,"spec":spec,"exe":exe}))
    sys.path=[p for p in (*sys.path,s(*(env/"lib").glob("py*/si*")))if p!=i("site").USER_SITE]
    return env
import subprocess
import sys

if __name__ == "__main__":
    vivenv = _viv_use("black==23.3.0", "click==8.1.3", "mypy-extensions==1.0.0", "packaging==23.1",
    "pathspec==0.11.1", "platformdirs==3.5.1")
    sys.exit(subprocess.run([vivenv / "bin" / "black", *sys.argv[1:]]).returncode)
