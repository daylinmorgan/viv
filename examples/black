#!/usr/bin/env python3
# AUTOGENERATED by viv (v23.5a7-6-g5febbe0-dev)
# see `python3 <(curl -fsSL viv.dayl.in/viv.py) --help`


def _viv_use(*pkgs, track_exe=False, name=""):
    import hashlib, json, os, site, shutil, sys, venv  # noqa
    from pathlib import Path  # noqa
    from datetime import datetime  # noqa
    from subprocess import run  # noqa

    if not {*map(type, pkgs)} == {str}:
        raise ValueError(f"spec: {pkgs} is invalid")

    meta = dict.fromkeys(("created", "accessed"), (t := str(datetime.today())))
    runner = str(Path(__file__).absolute().resolve())
    env = lambda x: os.getenv(f"VIV_{x}")  # noqa
    F, V, no_st = map(env, ("FORCE", "VERBOSE", "NO_SETUPTOOLS"))
    xdg = os.getenv("XDG_CACHE_HOME")
    cache = (Path(xdg) if xdg else Path.home() / ".cache") / "viv" / "venvs"
    cache.mkdir(parents=True, exist_ok=True)
    exe = str(Path(sys.executable).resolve()) if track_exe else "N/A"
    (sha256 := hashlib.sha256()).update((str(spec := [*pkgs]) + exe).encode())
    _id = sha256.hexdigest()
    if (env := cache / (name if name else _id)) not in cache.glob("*/") or F:
        sys.stderr.write(f"generating new vivenv -> {env.name}\n")
        venv.create(env, prompt=f"viv-{name}", symlinks=True, clear=True)
        kw = dict(zip(("stdout", "stderr"), ((None,) * 2 if V else (-1, 2))))
        if (not no_st) and (not [x for x in spec if x.startswith("setuptools")]):
            spec.append("setuptools")
        cmd = ["pip", "--python", str(env / "bin" / "python"), "install", *spec]
        p = run(cmd, **kw)
        if (rc := p.returncode) != 0:
            if env.is_dir():
                shutil.rmtree(env)
            sys.stderr.write(f"pip had non zero exit ({rc})\n{p.stdout.decode()}\n")
            sys.exit(rc)
        meta.update(dict(id=_id, spec=spec, exe=exe, name=name, files=[runner]))
    else:
        meta = json.loads((env / "vivmeta.json").read_text())
        meta.update(dict(accessed=t, files=sorted({*meta["files"], runner})))
    (env / "vivmeta.json").write_text(json.dumps(meta))
    site.addsitedir(sitepkgs := str(*(env / "lib").glob("py*/si*")))
    sys.path = [p for p in (sitepkgs, *sys.path) if p != site.USER_SITE]
    return env


import subprocess
import sys

if __name__ == "__main__":
    vivenv = _viv_use(
        "black==23.7.0",
        "click==8.1.6",
        "mypy-extensions==1.0.0",
        "packaging==23.1",  # noqa
        "pathspec==0.11.2",
        "platformdirs==3.10.0",
    )  # noqa
    sys.exit(subprocess.run([vivenv / "bin" / "black", *sys.argv[1:]]).returncode)
